import 'dart:async';

import 'package:flutter/material.dart';

/// This class is generated by flappy_translator package
/// You should never change something directly in this file but, instead, generate new file when needed with the package
class I18n {
  String get appTitle => _getText("appTitle");

  String get subtitle => _getText("subtitle");

  String description({
    int var1,
  }) {
    String text = _getText("description");
    if (var1 != null) {
      text = text.replaceAll("%1\$d", var1.toString());
    }
    return text;
  }

  String littleTest({
    int age,
  }) {
    String text = _getText("littleTest");
    if (age != null) {
      text = text.replaceAll("%age\$d", age.toString());
    }
    return text;
  }

  I18n(Locale locale) {
    this._locale = locale;
    _localizedValues = null;
  }

  Locale _locale;

  static Map<String, String> _localizedValues;

  static Map<String, String> _frValues = {
    "appTitle": "Un titre",
    "subtitle": "Un sous titre",
    "description": "Un texte avec une variable dont %1\$d est la valeur",
    "littleTest": "Voici, pour vous,    \"un test\" avec la variable %age\$d",
  };

  static Map<String, String> _enValues = {
    "appTitle": "A title",
    "subtitle": "Un sous titre",
    "description": "Un texte avec une variable dont %1\$d est la valeur",
    "littleTest": "ok",
  };

  static Map<String, String> _esValues = {
    "appTitle": "Una Titro",
    "subtitle": "Una SouTitra",
    "description": "Un texte avec une variable dont %1\$d est la valeur",
    "littleTest": "test 'hello' %1\$d",
  };
  static Map<String, Map<String, String>> _allValues = {
    "fr": _frValues,
    "en": _enValues,
    "es": _esValues,
  };

  static I18n of(BuildContext context) {
    return Localizations.of<I18n>(context, I18n);
  }

  String _getText(String key) {
    return _localizedValues[key] ?? '** $key not found';
  }

  static Future<I18n> load(Locale locale) async {
    I18n translations = new I18n(locale);
    _localizedValues = _allValues[locale.languageCode];
    return translations;
  }

  get currentLanguage => _locale.languageCode;
}

class I18nDelegate extends LocalizationsDelegate<I18n> {
  const I18nDelegate();

  @override
  bool isSupported(Locale locale) => ['fr', 'en', 'es'].contains(locale.languageCode);

  @override
  Future<I18n> load(Locale locale) => I18n.load(locale);

  @override
  bool shouldReload(I18nDelegate old) => false;
}
